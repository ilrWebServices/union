(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pl-modal-viewer"],{

/***/ "./src/scripts/components/modal-viewer.js":
/*!************************************************!*\
  !*** ./src/scripts/components/modal-viewer.js ***!
  \************************************************/
/*! exports provided: modalViewer */
/*! ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./src/scripts/patternlab-viewer.js (referenced with import()) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modalViewer\", function() { return modalViewer; });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/scripts/utils/index.js\");\n/* harmony import */ var _panels_viewer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./panels-viewer */ \"./src/scripts/components/panels-viewer.js\");\n/**\n * \"Modal\" (aka Panel UI) for the Viewer Layer - for both annotations and code/info\n */\n\n\n\nvar modalViewer = {\n  // set up some defaults\n  active: false,\n  switchText: true,\n  template: 'info',\n  patternData: {},\n  targetOrigin: window.location.protocol === 'file:' ? '*' : window.location.protocol + '//' + window.location.host,\n\n  /**\n   * initialize the modal window\n   */\n  onReady: function onReady() {\n    // make sure the listener for checkpanels is set-up\n    _utils__WEBPACK_IMPORTED_MODULE_1__[\"Dispatcher\"].addListener('insertPanels', modalViewer.insert); // add the info/code panel onclick handler\n\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-pattern-info-toggle').click(function (e) {\n      modalViewer.toggle();\n    }); // make sure the close button handles the click\n\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal-close-btn').on('click', function (e) {\n      // hide any open annotations\n      var obj = JSON.stringify({\n        event: 'patternLab.annotationsHighlightHide'\n      });\n      document.querySelector('.pl-js-iframe').contentWindow.postMessage(obj, modalViewer.targetOrigin); // hide the viewer\n\n      modalViewer.close();\n    }); // see if the modal is already active, if so update attributes as appropriate\n\n    if (_utils__WEBPACK_IMPORTED_MODULE_1__[\"DataSaver\"].findValue('modalActive') === 'true') {\n      modalViewer.active = true;\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-pattern-info-toggle').html('Hide Pattern Info');\n    } // make sure the modal viewer is not viewable, it's always hidden by default. the pageLoad event determines when it actually opens\n\n\n    modalViewer.hide(); // review the query strings in case there is something the modal viewer is supposed to handle by default\n\n    var queryStringVars = _utils__WEBPACK_IMPORTED_MODULE_1__[\"urlHandler\"].getRequestVars(); // show the modal if code view is called via query string\n\n    if (queryStringVars.view !== undefined && (queryStringVars.view === 'code' || queryStringVars.view === 'c')) {\n      modalViewer.queryPattern();\n    } // show the modal if the old annotations view is called via query string\n\n\n    if (queryStringVars.view !== undefined && (queryStringVars.view === 'annotations' || queryStringVars.view === 'a')) {\n      modalViewer.queryPattern();\n    }\n  },\n\n  /**\n   * toggle the modal window open and closed\n   */\n  toggle: function toggle() {\n    if (modalViewer.active === false) {\n      modalViewer.queryPattern();\n    } else {\n      var obj = JSON.stringify({\n        event: 'patternLab.annotationsHighlightHide'\n      });\n      document.querySelector('.pl-js-iframe').contentWindow.postMessage(obj, modalViewer.targetOrigin);\n      modalViewer.close();\n    }\n  },\n\n  /**\n   * open the modal window\n   */\n  open: function open() {\n    // make sure the modal viewer and other options are off just in case\n    modalViewer.close(); // note it's turned on in the viewer\n\n    _utils__WEBPACK_IMPORTED_MODULE_1__[\"DataSaver\"].updateValue('modalActive', 'true');\n    modalViewer.active = true; // show the modal\n\n    modalViewer.show();\n  },\n\n  /**\n   * close the modal window\n   */\n  close: function close() {\n    // note that the modal viewer is no longer active\n    _utils__WEBPACK_IMPORTED_MODULE_1__[\"DataSaver\"].updateValue('modalActive', 'false');\n    modalViewer.active = false; //Remove active class to modal\n\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal').removeClass('pl-is-active');\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal').removeAttr('style'); // remove inline height CSS\n    // WIP: refactoring viewport panel to use CSS vars to resize\n    // $('html').css('--pl-viewport-height', window.innerHeight - 32 + 'px');\n    // update the wording\n\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-pattern-info-toggle').html('Show Pattern Info'); // tell the styleguide to close\n\n    var obj = JSON.stringify({\n      event: 'patternLab.patternModalClose'\n    });\n    document.querySelector('.pl-js-iframe').contentWindow.postMessage(obj, modalViewer.targetOrigin);\n  },\n\n  /**\n   * hide the modal window\n   */\n  hide: function hide() {\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal').removeClass('pl-is-active');\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal').removeAttr('style'); // remove inline height CSS\n  },\n\n  /**\n   * insert the copy for the modal window. if it's meant to be sent back to the iframe, do that.\n   * @param  {String}       the rendered template that should be inserted\n   * @param  {String}       the patternPartial that the rendered template is related to\n   * @param  {Boolean}      if the refresh is of a view-all view and the content should be sent back\n   * @param  {Boolean}      if the text in the dropdown should be switched\n   */\n  insert: function insert(templateRendered, patternPartial, iframePassback, switchText) {\n    if (iframePassback) {\n      // send a message to the pattern\n      var obj = JSON.stringify({\n        event: 'patternLab.patternModalInsert',\n        patternPartial: patternPartial,\n        modalContent: templateRendered.outerHTML\n      });\n      document.querySelector('.pl-js-iframe').contentWindow.postMessage(obj, modalViewer.targetOrigin);\n    } else {\n      // insert the panels and open the viewer\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal-content').html(templateRendered);\n      modalViewer.open();\n    } // update the wording unless this is a default viewall opening\n\n\n    if (switchText === true) {\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-pattern-info-toggle').html('Hide Pattern Info');\n    }\n  },\n\n  /**\n   * refresh the modal if a new pattern is loaded and the modal is active\n   * @param  {Object}       the patternData sent back from the query\n   * @param  {Boolean}      if the refresh is of a view-all view and the content should be sent back\n   * @param  {Boolean}      if the text in the dropdown should be switched\n   */\n  refresh: function refresh(patternData, iframePassback, switchText) {\n    // if this is a styleguide view close the modal\n    if (iframePassback) {\n      modalViewer.hide();\n    } // gather the data that will fill the modal window\n\n\n    _panels_viewer__WEBPACK_IMPORTED_MODULE_2__[\"panelsViewer\"].gatherPanels(patternData, iframePassback, switchText);\n  },\n\n  /**\n   * slides the modal window into or out of view\n   * @param  {Integer}      where the modal window should be slide to\n   */\n  slide: function slide(pos) {\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal').toggleClass('pl-is-active');\n  },\n\n  /**\n   * slides the modal window to a particular annotation\n   * @param  {Integer}      the number for the element that should be highlighted\n   */\n  slideToAnnotation: function slideToAnnotation(pos) {\n    // remove active class\n    var els = document.querySelectorAll('.pl-js-annotations li');\n\n    for (var i = 0; i < els.length; ++i) {\n      els[i].classList.remove('pl-is-active');\n    } // add active class to called element and scroll to it\n\n\n    for (var _i = 0; _i < els.length; ++_i) {\n      if (_i + 1 === pos) {\n        els[_i].classList.add('pl-is-active');\n\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-pattern-info').animate({\n          scrollTop: els[_i].offsetTop - 10\n        }, 600);\n      }\n    }\n  },\n\n  /**\n   * Show modal\n   */\n  show: function show() {\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.pl-js-modal').addClass('pl-is-active');\n  },\n\n  /**\n   * ask the pattern for info so we can open the modal window and populate it\n   * @param  {Boolean}      if the dropdown text should be changed\n   */\n  queryPattern: function queryPattern(switchText) {\n    // note that the modal is active and set switchText\n    if (switchText === undefined || switchText) {\n      switchText = true;\n      _utils__WEBPACK_IMPORTED_MODULE_1__[\"DataSaver\"].updateValue('modalActive', 'true');\n      modalViewer.active = true;\n    } // send a message to the pattern\n\n\n    var obj = JSON.stringify({\n      event: 'patternLab.patternQuery',\n      switchText: switchText\n    });\n    document.querySelector('.pl-js-iframe').contentWindow.postMessage(obj, modalViewer.targetOrigin);\n  },\n\n  /**\n   * toggle the comment pop-up based on a user clicking on the pattern\n   * based on the great MDN docs at https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage\n   * @param  {Object}      event info\n   */\n  receiveIframeMessage: function receiveIframeMessage(event) {\n    // does the origin sending the message match the current host? if not dev/null the request\n    if (window.location.protocol !== 'file:' && event.origin !== window.location.protocol + '//' + window.location.host) {\n      return;\n    }\n\n    var data = {};\n\n    try {\n      data = typeof event.data !== 'string' ? event.data : JSON.parse(event.data);\n    } catch (e) {// @todo: how do we want to handle exceptions here?\n    }\n\n    if (data.event !== undefined && data.event === 'patternLab.pageLoad') {\n      if (modalViewer.active === false && data.patternpartial !== undefined && data.patternpartial.indexOf('viewall-') === 0 && window.config.defaultShowPatternInfo !== undefined && window.config.defaultShowPatternInfo) {\n        modalViewer.queryPattern(false);\n      } else if (modalViewer.active === true) {\n        modalViewer.queryPattern();\n      }\n    } else if (data.event !== undefined && data.event === 'patternLab.patternQueryInfo') {\n      // refresh the modal if a new pattern is loaded and the modal is active\n      modalViewer.refresh(data.patternData, data.iframePassback, data.switchText);\n    } else if (data.event !== undefined && data.event === 'patternLab.annotationNumberClicked') {\n      // slide to a given annoation\n      modalViewer.slideToAnnotation(data.displayNumber);\n    }\n  }\n}; // when the document is ready make sure the modal is ready\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {\n  modalViewer.onReady();\n});\nwindow.addEventListener('message', modalViewer.receiveIframeMessage, false);\n\n//# sourceURL=webpack:///./src/scripts/components/modal-viewer.js?");

/***/ })

}]);