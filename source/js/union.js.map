{"version":3,"sources":["components/banner/banner.js","components/dismissible/dismissible.js","components/form/form.js","components/registration-form/registration-form.js","components/video/video.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"union.js","sourcesContent":["(function (document) {\n\n  // Wire play icons to videos in banners.\n  document.addEventListener('click', function(event) {\n    if (event.target.matches('.cu-icon--play')) {\n      // If the icon has a video target selector in a `data-cu-video-target`\n      // attribute, use that. Otherwise, use the closest video.\n      let video_element = document.querySelector(event.target.dataset.cuVideoTarget) || event.target.closest('.cu-banner').querySelector('.cu-banner__media video');\n      let overlay_content = event.target.closest('.cu-banner__content');\n\n      if (video_element && video_element.paused) {\n        video_element.play();\n        overlay_content.style.display = 'none';\n        video_element.controls = true;\n      }\n    }\n  });\n\n})(document);\n","(function (window, document) {\n\n  if (('localStorage' in window) === false) {\n    return;\n  }\n\n  const processDismissibles = function() {\n    const dismissible_elements = document.querySelectorAll('[data-cu-digest].cu-dismissible');\n\n    for (const dismissible_element of dismissible_elements) {\n      // Has this element been dismissed? Tag it with a class if so.\n      if (parseInt(localStorage.getItem('cu-diss-' + dismissible_element.dataset.cuDigest))) {\n        dismissible_element.classList.add('cu-dismissible--predismissed')\n      }\n      else {\n        dismissible_element.classList.remove('cu-dismissible--predismissed');\n      }\n    }\n  };\n\n  let observer = new MutationObserver(processDismissibles).observe(document, {\n    childList: true,\n    subtree: true\n  });\n\n  // Store the dismissal state in local storage.\n  document.addEventListener('change', function(event) {\n    if (event.target.matches('.cu-dismissible__input')) {\n      localStorage.setItem('cu-diss-' + event.target.parentNode.dataset.cuDigest, event.target.checked ? 1 : 0);\n    }\n  }, false);\n\n})(window, document);\n","(function (document) {\n\n  document.addEventListener('change', function(event) {\n    if (event.target.matches('.cu-input')) {\n      let wrapper = event.target.closest('.cu-input-list__item');\n\n      if (event.target.value) {\n        event.target.classList.add('is-filled');\n        if (wrapper) {\n          wrapper.classList.add('is-filled');\n        }\n      }\n      else {\n        event.target.classList.remove('is-filled');\n        if (wrapper) {\n          wrapper.classList.remove('is-filled');\n        }\n      }\n    }\n  }, false);\n\n  // This is the equivalent of focus (which doesnt' bubble).\n  document.addEventListener('focusin', function(event) {\n    if (event.target.matches('.cu-input')) {\n      let wrapper = event.target.closest('.cu-input-list__item');\n\n      event.target.classList.remove('is-touched');\n      event.target.classList.add('is-focused');\n\n      // Check for wrapper and update classes.\n      if (wrapper) {\n        wrapper.classList.add('is-active')\n      }\n\n      // If there were server-side errors, the 'is-invalid' class will be present\n      // but should be removed on focus because the user is trying to fix them.\n      event.target.classList.remove('is-invalid');\n\n      if (event.target.errors) {\n        event.target.errors.remove();\n      }\n    }\n  }, false);\n\n  // This is the equivalent of blur (which doesnt' bubble).\n  document.addEventListener('focusout', function(event) {\n    if (event.target.matches('.cu-input')) {\n      let wrapper = event.target.closest('.cu-input-list__item');\n\n      if (!event.isTrusted) {\n        // This blur event was triggered by a script, not a human, so don't mark\n        // the input as is-touched (because it actually wasn't) or show errors.\n\n        // Note that Mozilla claims that isTrusted shouldn't work in IE, but\n        // based on testing, it does.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\n        return;\n      }\n\n      event.target.classList.add('is-touched');\n      event.target.classList.remove('is-focused');\n\n      // Check for wrapper and update classes\n      if (wrapper) {\n        wrapper.classList.remove('is-active');\n      }\n    }\n  }, false);\n\n  // Process any .cu-input elements whenever stuff is added to the DOM. This\n  // includes the initial page load.\n  let observer = new MutationObserver(function(mutations, observer) {\n    // Check to see if any of the mutations added nodes to the DOM.\n    let added_children = false;\n\n    for (const mutation of mutations) {\n      if (mutation.type === 'childList' && mutation.addedNodes.length) {\n        added_children = true;\n        break;\n      }\n    }\n\n    // Return if not adding children.\n    if (!added_children) {\n      return;\n    }\n\n    const inputs = document.querySelectorAll('.cu-input');\n\n    for (const input of inputs) {\n      const wrapper = input.closest('.cu-input-list__item');\n\n      // Check if the field has pre-filled text from the server side.\n      if (input.value) {\n        input.classList.add('is-filled');\n\n        // Check if input has a wrapper.\n        if (wrapper) {\n          wrapper.classList.add('is-filled');\n        }\n      }\n\n      // If wrapper, remove the js-disabled class for float labels.\n      if (wrapper) {\n        wrapper.classList.remove('js-disabled');\n      }\n    }\n  });\n\n  // @todo Investigate the performance ramifications of observing the entire\n  // document, plus its children.\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n\n})(document);\n","(function(window, document) {\n\n  const processRegistrationForms = function() {\n    const registrationForms = document.querySelectorAll('.cu-registration-form');\n\n    if (registrationForms == null) {\n      return;\n    }\n\n    for (const registrationForm of registrationForms) {\n      const prices = registrationForm.querySelectorAll('.cu-js-price');\n      const buttons = registrationForm.querySelectorAll('.cu-button');\n      const input_name = registrationForm.querySelector('.cu-checkbutton__input').getAttribute('name');\n\n      // Hide any displayed prices.\n      prices.forEach(function(price) {\n        price.style.display = 'none';\n      });\n\n      // Hide any checkbutton registration links.\n      buttons.forEach(function (button) {\n        button.style.display = 'none';\n      });\n\n      let first_input = registrationForm.querySelector('input[name=\"' + input_name + '\"]')\n      let checked_input = registrationForm.querySelector('input[name=\"' + input_name + '\"]:checked');\n\n      // If there is a checked input, activate its price.\n      if (checked_input) {\n        setActivePrice(registrationForm, checked_input);\n        addRegistrationButton(registrationForm, checked_input);\n      }\n      // Otherwise, activate the price of the first input.\n      else {\n        first_input.checked = true;\n        setActivePrice(registrationForm, first_input);\n        addRegistrationButton(registrationForm, first_input);\n      }\n    }\n  }\n\n  const checkButtonChangeHandler = function(checkbutton_input) {\n    let registrationForm = checkbutton_input.closest('form');\n    setActivePrice(registrationForm, checkbutton_input);\n    setRegisterLink(registrationForm, checkbutton_input);\n  }\n\n  const setActivePrice = function(registrationForm, input) {\n    let priceElement = registrationForm.querySelector('.cu-registration-form__active-price');\n    priceElement.textContent = input.dataset.price;\n    activePriceSet = true;\n  }\n\n  const addRegistrationButton = function (registrationForm, checked_input) {\n    let registerButton = document.createElement('a');\n    registerButton.setAttribute('class', 'cu-button cu-button--alt cu-js-register-link');\n    registerButton.setAttribute('href', checked_input.value);\n    registerButton.innerHTML = 'Register';\n    checked_input.parentNode.parentNode.appendChild(registerButton, registrationForm);\n  }\n\n  const setRegisterLink = function (registrationForm, checked_input) {\n    let registerButton = registrationForm.querySelector('.cu-js-register-link');\n    registerButton.setAttribute('href', checked_input.value);\n  }\n\n  window.addEventListener('DOMContentLoaded', processRegistrationForms);\n\n  document.addEventListener('change', function(event) {\n    if (event.target.matches('.cu-checkbutton__input')) {\n      checkButtonChangeHandler(event.target);\n    }\n  }, false);\n\n})(window, document);\n","// A simple script to pause videos when they aren't visible in the viewport.\n// @todo Add logic to deal with videos added to the DOM via ajax or other.\n// @todo Deal with videos in iframes. See https://stackoverflow.com/a/15251023 and https://stackoverflow.com/q/12336031\n(function (window, document) {\n\n  const cu_video_elements = document.querySelectorAll('.cu-video');\n\n  const inViewport = function(el) {\n    let bounding = el.getBoundingClientRect();\n    let within_upper_bounds = (bounding.top + bounding.height / 2 < window.innerHeight);\n    let within_lower_bounds = (bounding.bottom > bounding.height / 2);\n    return within_upper_bounds && within_lower_bounds;\n  };\n\n  let debounce_timeout;\n  window.addEventListener('scroll', function(ev) {\n    clearTimeout(debounce_timeout);\n    debounce_timeout = setTimeout(function() {\n      for (const cu_video_element of cu_video_elements) {\n        // See if the video is in the viewport. I.e. is visible.\n        if (inViewport(cu_video_element)) {\n          // If it is visible, only play it if it was paused via javascript\n          // rather than manually by the user.\n          if (cu_video_element.classList.contains('js-paused')) {\n            cu_video_element.play();\n            cu_video_element.classList.remove('js-paused')\n          }\n        }\n        // The video is outside the viewport (i.e. not visible).\n        else {\n          // If the video is already paused, it was probably done by the user,\n          // so leave it paused and don't add the class that indicates that the\n          // video was paused via javascript.\n          if (cu_video_element.paused === false) {\n            cu_video_element.pause();\n            cu_video_element.classList.add('js-paused')\n          }\n        }\n      }\n    }, 500);\n\n  }, false);\n\n})(window, document);\n"]}