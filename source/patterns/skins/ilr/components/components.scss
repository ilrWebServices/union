@import './source/global/global';

// Skin-specific component styles here until size gets unmanageable

.cu-logo--ilr-lockup {
  max-width: 350px;

  img {
    max-width: 80%;
  }
}

:root {
  --frame-width: 10px;

  @include breakpoint(sm) {
    --frame-width: 20px;
  }

  --notchSize: calc(var(--frame-width) / 10);
}

@mixin notch() {
  position: relative;
  clip-path:
    polygon(0% var(--notchSize),
      /* top left */
      var(--notchSize) 0%,
      /* top left */
      calc(100% - var(--notchSize)) 0%,
      /* top right */
      100% var(--notchSize),
      /* top right */
      100% calc(100% - var(--notchSize)),
      /* bottom right */
      calc(100% - var(--notchSize)) 100%,
      /* bottom right */
      var(--notchSize) 100%,
      /* bottom left */
      0% calc(100% - var(--notchSize))
      /* bottom left */
    );
}

.framed {
  display: grid;
  min-height: 90%;

  >*:first-child {
    @include notch; // upper/lower cutouts of the left or right border
    display: grid;
    grid-column-gap: 2em;
    position: relative;
    height: 100%;

    // Set the top border
    &::before {
      @include notch;
      content: '';
      display: block;
      grid-row: 1;
      background: white;
      height: var(--frame-width);
    }
  }

  // Prepare the last element of the grid for the frame
  >*:last-child {
    // grid-column: 1 / -1;
    display: grid;
    grid-column-gap: 1em;
    grid-template-columns: 50% auto;
    justify-items: start;
    align-content: end;
    margin-bottom: 0;

    >* {
      // All direct children
      grid-column: 1;
      display: inline-flex;
      justify-content: space-between;
    }

    // Set the bottom frame line
    &::after {
      @include notch;
      justify-self: stretch;
      align-self: end;
      content: '';
      display: block;
      bottom: 0;
      background: white;
      height: var(--frame-width);
    }
  }
}

.framed--left {
  border-left: var(--frame-width) solid white;
  grid-template-columns: 2rem fit-content(75%) auto;

  &::before {
    grid-column-start: span 2;
    left: calc(var(--notchSize) * -1); // move over to remove notch gap
  }

  >*:first-child {
    padding-top: 2rem;
  }

  >* {
    // All direct children
    grid-column: 2;
    display: grid;
  }

  >*:last-child {
    grid-template-columns: 2rem fit-content(50%) auto;

    >* {
      grid-column: 2;
    }

    &::after {
      grid-column: 1 / 3;
      left: calc(var(--notchSize) * -1); // move over to remove notch gap
    }
  }
}

.framed--right {
  border-right: var(--frame-width) solid white;

  >*:first-child {
    grid-template-columns: fit-content(90%) 1fr;
    margin-right: -2px;

    @include breakpoint(sm) {
      grid-template-columns: fit-content(75%) 1fr;
    }

    &::before {
      grid-column: 2;
      right: calc(var(--notchSize) * -1); // move over to remove notch gap
    }
  }


  // > * {
  //   grid-column: 1;
  // }

  >*:last-child {
    &::after {
      right: calc(var(--notchSize) * -1); // move over to remove notch gap
    }
  }
}
