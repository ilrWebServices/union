{"version":3,"sources":["components/dismissible/dismissible.js","components/form/form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"union.js","sourcesContent":["(function (window, document) {\n\n  if (('localStorage' in window) === false) {\n    return;\n  }\n\n  const processDismissibles = function() {\n    const dismissible_elements = document.querySelectorAll('[data-cu-digest].cu-dismissible');\n\n    for (const dismissible_element of dismissible_elements) {\n      // Has this element been dismissed? Tag it with a class if so.\n      if (parseInt(localStorage.getItem('cu-diss-' + dismissible_element.dataset.cuDigest))) {\n        dismissible_element.classList.add('cu-dismissible--predismissed')\n      }\n      else {\n        dismissible_element.classList.remove('cu-dismissible--predismissed');\n      }\n    }\n  };\n\n  let observer = new MutationObserver(processDismissibles).observe(document, {\n    childList: true,\n    subtree: true\n  });\n\n  // Store the dismissal state in local storage.\n  document.addEventListener('change', function(event) {\n    if (event.target.matches('.cu-dismissible__input')) {\n      localStorage.setItem('cu-diss-' + event.target.parentNode.dataset.cuDigest, event.target.checked ? 1 : 0);\n    }\n  }, false);\n\n})(window, document);\n","(function (document) {\n\n  document.addEventListener('change', function(event) {\n    if (event.target.matches('.cu-input')) {\n      let wrapper = event.target.closest('.cu-input-list__item');\n\n      if (event.target.value) {\n        event.target.classList.add('is-filled');\n        wrapper.classList.add('is-filled');\n      }\n      else {\n        event.target.classList.remove('is-filled');\n        wrapper.classList.remove('is-filled');\n      }\n    }\n  }, false);\n\n  // This is the equivalent of focus (which doesnt' bubble).\n  document.addEventListener('focusin', function(event) {\n    if (event.target.matches('.cu-input')) {\n      let wrapper = event.target.closest('.cu-input-list__item');\n\n      event.target.classList.remove('is-touched');\n      event.target.classList.add('is-focused');\n\n      // Check for wrapper and update classes.\n      if (wrapper) {\n        wrapper.classList.add('is-active')\n      }\n\n      // If there were server-side errors, the 'is-invalid' class will be present\n      // but should be removed on focus because the user is trying to fix them.\n      event.target.classList.remove('is-invalid');\n\n      if (event.target.errors) {\n        event.target.errors.remove();\n      }\n    }\n  }, false);\n\n  // This is the equivalent of blur (which doesnt' bubble).\n  document.addEventListener('focusout', function(event) {\n    if (event.target.matches('.cu-input')) {\n      let wrapper = event.target.closest('.cu-input-list__item');\n\n      if (!event.isTrusted) {\n        // This blur event was triggered by a script, not a human, so don't mark\n        // the input as is-touched (because it actually wasn't) or show errors.\n\n        // Note that Mozilla claims that isTrusted shouldn't work in IE, but\n        // based on testing, it does.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\n        return;\n      }\n\n      event.target.classList.add('is-touched');\n      event.target.classList.remove('is-focused');\n\n      // Check for wrapper and update classes\n      if (wrapper) {\n        wrapper.classList.remove('is-active');\n      }\n    }\n  }, false);\n\n  // Process any .cu-input elements whenever stuff is added to the DOM. This\n  // includes the initial page load.\n  let observer = new MutationObserver(function(mutations, observer) {\n    // Check to see if any of the mutations added nodes to the DOM.\n    let added_children = false;\n\n    for (const mutation of mutations) {\n      if (mutation.type === 'childList' && mutation.addedNodes.length) {\n        added_children = true;\n        break;\n      }\n    }\n\n    // Return if not adding children.\n    if (!added_children) {\n      return;\n    }\n\n    const inputs = document.querySelectorAll('.cu-input');\n\n    for (const input of inputs) {\n      const wrapper = input.closest('.cu-input-list__item');\n\n      // Check if the field has pre-filled text from the server side.\n      if (input.value) {\n        input.classList.add('is-filled');\n\n        // Check if input has a wrapper.\n        if (wrapper) {\n          wrapper.classList.add('is-filled');\n        }\n      }\n\n      // If wrapper, remove the js-disabled class for float labels.\n      if (wrapper) {\n        wrapper.classList.remove('js-disabled');\n      }\n    }\n  });\n\n  // @todo Investigate the performance ramifications of observing the entire\n  // document, plus its children.\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n\n})(document);\n"]}